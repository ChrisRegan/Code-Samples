local rowPos = {	-- table of Spawn position of each column for the row
	vmath.vector3(103,611, 0.8),
	vmath.vector3(167,611, 0.8),
	vmath.vector3(231,611, 0.8),
	vmath.vector3(295,611, 0.8),
	vmath.vector3(359,611, 0.8),
	vmath.vector3(423,611, 0.8)
}

local updateState=function()end	-- call the correct update function.  Either a game over empty function, collectUpdate, or Gameplaying  
local gameState={}		-- Tracks the current gameState by inserting a table for a row and in that table has the tile data
local numberRows = 8	-- Max number of rows before the game ends
local speed = 200.0  	-- distance the tiles move
local spawnHeight = 547 -- The height the first row needs to be in order to spawn the next row.

local timePassed = 0	-- tracks timePassed to move or clear the board of collected tiles
local moveDownTime		-- the amount of time needed to pass to clear the collected tiles or to move the tiles down
local const_MoveDownTime = 0.6	-- value to reset moveDown time if modified

local tileHeight = 64	-- Height of the tile to be offset
local collect = 4 		-- min matches to collect the tiles
local collected = false -- Tracks which audio to play for the collection sfx

local messages = {}		-- stores the functions by message_id. Cleans up the message function by making the key
						-- the message_id as well as taking advantage of the table lookup to call the right function.

local matchingTiles = {} -- Stores all the collected tile yet to be deleted.
local grabbed = nil      -- holds the tiledata of the grabbed object


local function compareTiles(row, col, tileData, searched)
	if gameState[row] ~= nil and gameState[row][col] ~= nil and gameState[row][col]["color"] == tileData["color"] then
		for i = 1, #searched, 1 do
			if searched[i]["tile"] == gameState[row][col]["tile"] then
				return nil
			end
		end	

		return gameState[row][col]
	end

	return nil
end

local function countColor(tileData)
	local foundColors = {tileData}
	local searched = {}

	repeat
		local t = table.remove(foundColors)
		table.insert(searched, t)

		local row = t["RowNum"]
		local col = t["ColNum"]

		table.insert(foundColors, compareTiles(row+1, col, t, searched)) -- below
		table.insert(foundColors, compareTiles(row-1, col, t, searched)) -- above
		table.insert(foundColors, compareTiles(row, col+1, t, searched)) -- right
		table.insert(foundColors, compareTiles(row, col-1, t, searched)) -- left
	until(#foundColors == 0)

	return searched
end

local function tablelength(T)
	local count = 0
	for _ in pairs(T) do count = count + 1 end
	return count
end

local function removeEmpty(rowNumber)
	if tablelength(gameState[rowNumber]) == 0 then
		table.remove(gameState, rowNumber)
	end
end

-- Collect the sum of all adjacent colors and return all colors that would not complete the color combo
local function validColors()
	local tileData = gameState[1][#gameState[1]]
	local sumColors = {RedTile = 0, YellowTile = 0, BlueTile = 0, GreenTile = 0, PurpleTile = 0}

	for color, count in pairs(sumColors) do
		tileData["color"] = color
		sumColors[color] = #countColor(tileData)
	end
	
	local included = {}
	for color, sum in pairs(sumColors) do
		if sum < collect - 1 then
			table.insert(included, color)
		end
	end

	return included
end

local function shuffle(colors)
	local shuffledTable = {}
	while #colors > 0 do
		local rand = math.random(#colors)
		local color = colors[rand]
		table.insert(shuffledTable, color)
		table.remove(colors, rand)
	end
	return shuffledTable
end

local function generateTile(self, pos)
	local tile = factory.create("#TileFactory", pos)
	table.insert(gameState[1], {tile = tile, RowNum = 1, ColNum = #gameState[1]+1 })
	
	local colors = shuffle(validColors())
	local color = table.remove(colors)
	gameState[1][#gameState[1]]["color"] = color

	local tileSprite = msg.url(nil, tile, "tileSprite")
	msg.post(tileSprite, "play_animation", {id = hash(color)})

	local collectedSprite = msg.url(nil, tile, "collected")
	msg.post(collectedSprite, "disable")	
end

local function spawnRow(self, tile)
	local row={}
	table.insert(gameState, 1, row)
	for rowNum = 2, #gameState, 1 do
		for colNum, tileData in pairs(gameState[rowNum]) do
			tileData["RowNum"] = rowNum
			tileData["ColNum"] = colNum
		end
	end

	if gameState[2] == nil then

		for colNum, pos in ipairs(rowPos) do
			generateTile(self, pos)
		end

	else
		for colNum, pos in ipairs(rowPos) do
			pos['y'] = tile + tileHeight
			generateTile(self, pos)
		end

		if #gameState >= numberRows then
			updateState = function()end
			msg.post("/Player#player", "GameOver")
		end
	end
end

local function findTile(row)
	local tile = nil
	for key, value in pairs(row) do 
		if value ~= nil then
			tile = value
			break
		end
	end
	return tile
end


--  One of the update functions that may change depending on collection and gameover
local function GamePlaying(self, dt)
	timePassed = timePassed + dt
	
	if timePassed >= moveDownTime then
		timePassed = 0
		
		for rowNum, row in ipairs(gameState) do
			for tileNum, tile in pairs(row) do
				local pos = go.get_position(tile["tile"])
				pos = pos - (vmath.vector3(0,1,0) * speed) * dt
				go.set_position(pos, tile["tile"])
			end
		end
		local tilePos = go.get_position(findTile(gameState[1])["tile"])['y']
		if tilePos <= spawnHeight then
			spawnRow(self, tilePos)
		end
	end
end

--  One of the update functions that may change depending on collection and gameover
local function collectUpdate(self, dt)
	timePassed = timePassed + dt

	if timePassed >= moveDownTime then
		timePassed = 0

		repeat
			local tdata = table.remove(matchingTiles)
			if tdata == nil then
				break
			end
			go.delete(tdata["tile"])
			gameState[tdata["RowNum"]][tdata["ColNum"]] = nil
		until(#matchingTiles == 0)

		for rowNumber, row in ipairs(gameState) do
			removeEmpty(rowNumber)
		end

		local changed = {}

		for colNum, pos in ipairs(rowPos) do
			for rowNum, row in ipairs(gameState) do
				if row[colNum] == nil then
					for i = rowNum, #gameState, 1 do
						if gameState[i][colNum] ~= nil then
							gameState[rowNum][colNum] = gameState[i][colNum]
							gameState[i][colNum] = nil
							table.insert(changed, gameState[rowNum][colNum])
							break

						end
					end
				end

				if gameState[rowNum][colNum] ~= nil then
					gameState[rowNum][colNum]["ColNum"] = colNum
					local pos = go.get_position(gameState[rowNum][colNum]["tile"])
					pos["y"] = pos["y"] + ((gameState[rowNum][colNum]["RowNum"] - rowNum) * tileHeight)
					gameState[rowNum][colNum]["RowNum"] = rowNum
					go.set_position(pos, gameState[rowNum][colNum]["tile"])
				end
			end
		end

		for key, tileData in ipairs(changed) do
			collectTiles(tileData)
		end

		if #matchingTiles < collect then
			collected = false
			updateState = GamePlaying
		end
	end
end

function collectTiles(tData)
	local check = countColor(tData)
	if #check > collect - 1 then
		timePassed = 0
		updateState = collectUpdate

		for key, tile in pairs(check) do
			table.insert(matchingTiles, tile)
		end

		if not collected then
			sound.play("/Game Field#collect")
		else
			sound.play("/Game Field#collect2")
		end
		
		collected = true
		
		for key, tile in ipairs(matchingTiles) do
			local collectedSprite = msg.url(nil, tile["tile"], "collected")
			msg.post(collectedSprite, "enable")
		end
	end
end

local function SpeedUp(self, message_id, message, sender)
	if message[2].pressed then
		speed = 150
		moveDownTime = 0
	elseif message[2].released then
		speed = 200
		moveDownTime = const_MoveDownTime
	end
end

local function Grab(self, message_id, message, sender)

	-- message = {playerPos, action, held TileID}
	local playerPos = message[1] 
	local tileTable = nil 		 -- {rowNumber, TileID}
	local held = message[3]

	-- Find the last row a tile is on.
	local RowNumber = 0
	for RowNumber = #gameState, 1, -1 do
		local row = gameState[RowNumber]
		if row[playerPos] ~= nil then
			tileTable = {RowNumber, row[playerPos]}
			break
		end
	end
	
	if held == nil then
		-- if picking up the block
		
		if tileTable ~= nil then
			for key, tiledata in ipairs(matchingTiles) do
				if tileTable[2]["tile"] == tiledata["tile"] then
					return
				end
			end

			sound.play("/Game Field#grabTile")
			grabbed = tileTable[2]
			msg.post(sender, "Grabbed Tile", {tileTable[2]["tile"]})
			gameState[tileTable[1]][playerPos] = nil
			grabbed["ColNum"] = nil
			grabbed["RowNum"] = nil
			removeEmpty(tileTable[1])
		end
	else
		-- If releaseing the grabbed block
		
		local newPos = rowPos[playerPos]
		if tileTable == nil then
			tileTable = {0, findTile(gameState[1])}
			if tileTable[2] ~= nil then
				newPos['y'] = go.get_position(tileTable[2]["tile"])['y']
			else
				newPos['y'] = rowPos[playerPos]
			end
		else
			local pos = go.get_position(tileTable[2]["tile"])
			newPos['y'] = pos['y'] - tileHeight
		end
		
		go.set_position(newPos, grabbed["tile"])

		if gameState[tileTable[1]+1] == nil then
			gameState[tileTable[1]+1] = {}
		end
		
		gameState[tileTable[1]+1][playerPos] = grabbed
		gameState[tileTable[1]+1][playerPos]["ColNum"] = playerPos
		gameState[tileTable[1]+1][playerPos]["RowNum"] = tileTable[1]+1
		sound.play("/Game Field#grabTile")
		collectTiles(grabbed)

		msg.post(sender, "Grabbed Tile", {nil})
	end 
end


function init(self)
	local tableAddr = tostring({})
	local hashAddr = hash(tableAddr)
	local toHex = hash_to_hex(hashAddr):sub(4, 8) -- grabs random portion of the hex.
	local convertToInt = tonumber(toHex, 16)
	math.randomseed(convertToInt)
	
	messages[hash("SpeedUp")] = SpeedUp
	messages[hash("getStartPos")] = function(self, message_id, message, sender) msg.post(sender, "returned Positions", rowPos) end
	messages[hash("Grab")] = Grab
	
	moveDownTime = const_MoveDownTime
	updateState = GamePlaying
	spawnRow(self)
end

function fixed_update(self, dt)
	updateState(self, dt)
end

function on_message(self, message_id, message, sender)
	if messages[message_id] ~= nil then
		-- Message recieved from the player script.  Usually when the player requests an interaction with a tile.
		messages[message_id](self, message_id, message, sender)
	end
end
